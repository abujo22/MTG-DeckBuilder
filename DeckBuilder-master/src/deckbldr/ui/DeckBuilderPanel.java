/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package deckbldr.ui;

import deckbldr.logic.ModifyDeck;
import javax.swing.DefaultListModel;
import deckbldr.domain.Card;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import deckbldr.domain.Deck;
import java.util.ArrayList;
/**
 * Panel for Deck Building
 * @author sdai201, Richard, Nil
 */
public class DeckBuilderPanel extends javax.swing.JPanel {
    public DefaultListModel deckList = new DefaultListModel();
    public Deck activeDeck = new Deck();
    /**
     * Creates new form DeckBuilderPanel
     */
    public DeckBuilderPanel() {
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deckContentsjScrollPane = new javax.swing.JScrollPane();
        deckContentsjList = new javax.swing.JList();
        removeSelectedCardjButton = new javax.swing.JButton();
        addCardjButton = new javax.swing.JButton();
        clearDeckjButton = new javax.swing.JButton();

        deckContentsjScrollPane.setViewportView(deckContentsjList);

        removeSelectedCardjButton.setText("Remove Selected Card");
        removeSelectedCardjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSelectedCardjButtonActionPerformed(evt);
            }
        });

        addCardjButton.setText("Add Card");
        addCardjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCardjButtonActionPerformed(evt);
            }
        });

        clearDeckjButton.setText("Clear Deck");
        clearDeckjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDeckjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deckContentsjScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(removeSelectedCardjButton, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                        .addComponent(addCardjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(clearDeckjButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addCardjButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 82, Short.MAX_VALUE)
                        .addComponent(removeSelectedCardjButton)
                        .addGap(65, 65, 65)
                        .addComponent(clearDeckjButton)
                        .addGap(85, 85, 85))
                    .addComponent(deckContentsjScrollPane))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Removes selcted card from the deck
     * Created by Richard
     * Modified by Steven, Richard
     * @param evt 
     */
    private void removeSelectedCardjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSelectedCardjButtonActionPerformed
       ModifyDeck md= new ModifyDeck(); 
       String deckName = activeDeck.getDeckName();
       DefaultListModel model = (DefaultListModel) deckContentsjList.getModel();
       Object tempCard= deckContentsjList.getSelectedValue();
       String tempCardName=tempCard.toString();
        try {
            md.deleteCardFromDeck(tempCardName, deckName);
        } catch (SQLException ex) {
            Logger.getLogger(DeckBuilderPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_removeSelectedCardjButtonActionPerformed
    /**
     * Clears all the elements in the deck
     * Created by Steven
     * Modified by Steven
     * @param evt 
     */
    private void clearDeckjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDeckjButtonActionPerformed
        
        DefaultListModel model = (DefaultListModel) deckContentsjList.getModel();
        model.removeAllElements();
    
    }//GEN-LAST:event_clearDeckjButtonActionPerformed
    /**
     * Adds selcted card to the deck
     * Created by Richard
     * Modified by Steven, Richard
     * @param evt 
     */
    private void addCardjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCardjButtonActionPerformed
        ModifyDeck md= new ModifyDeck();
        String deckName=activeDeck.getDeckName();
        try {
            md.addCardToDeck(deckName);
        } catch (SQLException ex) {
            Logger.getLogger(DeckBuilderPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addCardjButtonActionPerformed
    /**
     * Creates a deck instance that saves the currently selected deck into our panel
     * changes with every new searched or created deck
     * Created by Richard, Nil
     * Filled in by Richard
     * Modified by Steven
     * @param deck 
     */
    public void setDeck(Deck deck)
    {
        activeDeck = deck;
        ArrayList<Card> deckList = activeDeck.getCards();
        DefaultListModel model = (DefaultListModel) deckContentsjList.getModel();
        for (int i = 0; i < deckList.size(); i++)
        {
            model.addElement(deckList.get(i).getName());
            deckContentsjList.setModel(model);
        
        }
    
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCardjButton;
    private javax.swing.JButton clearDeckjButton;
    private javax.swing.JList deckContentsjList;
    private javax.swing.JScrollPane deckContentsjScrollPane;
    private javax.swing.JButton removeSelectedCardjButton;
    // End of variables declaration//GEN-END:variables
}
