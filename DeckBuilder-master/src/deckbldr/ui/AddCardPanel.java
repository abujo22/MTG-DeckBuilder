package deckbldr.ui;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import java.net.URL;
import java.awt.Image;
import javax.imageio.ImageIO;
import deckbldr.dbaccess.*;
import deckbldr.domain.*;
import deckbldr.logic.ModifyDB;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import deckbldr.logic.ModifyDB;

/** AddCardPanel
 *  This class is the GUI representation of adding/removing cards to/from the database.
 *  The user will run the panel from the DeckBuilderJFrame and type in desired Magic card names.
 *  The ModifyDB logic will be called appropriately.
 * @author Wilson Zhao
 */
public class AddCardPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddCardPanel
     */
    public AddCardPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TitleLabel = new javax.swing.JLabel();
        cardNameLabel = new javax.swing.JLabel();
        resultLabel = new javax.swing.JLabel();
        cardNameTextField = new javax.swing.JTextField();
        addCardButton = new javax.swing.JButton();
        removeCardButton = new javax.swing.JButton();
        clearSearchButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        cardDisplayLabel = new javax.swing.JLabel();

        TitleLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TitleLabel.setText("Add/Remove Card to Database:");

        cardNameLabel.setText("Card Name:");

        cardNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardNameTextFieldActionPerformed(evt);
            }
        });

        addCardButton.setText("Add Card to Database");
        addCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCardButtonActionPerformed(evt);
            }
        });

        removeCardButton.setText("Remove Card From Database");
        removeCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCardButtonActionPerformed(evt);
            }
        });

        clearSearchButton.setText("Clear Search");
        clearSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSearchButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cardNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cardNameTextField))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addCardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeCardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearSearchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton))
                    .addComponent(resultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cardDisplayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(TitleLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cardNameTextField)
                    .addComponent(cardNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardDisplayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCardButton)
                    .addComponent(removeCardButton)
                    .addComponent(clearSearchButton)
                    .addComponent(exitButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /* setCardDisplayLabel
    *  Sets cardDisplayLabel to display an icon representing the card's image obtained from the imageURL field.
    *  Sizes the label accordingly with the height and width of the image.
    *  @param img
    *  BufferedImage img is passed through from addCardToDatabase and removeCardFromDatabase when calling setCardDisplayLabel method.
    */
    
    private void setCardDisplayLabel(BufferedImage img){
        this.img = img;
        int height = img.getHeight();
        int width  = img.getWidth();
        cardDisplayLabel.setSize(width, height);
        cardDisplayLabel.setIcon(new ImageIcon(img));
    }
    
    /* removeCardButtonActionPerformed
    *  removeCard calls on modifyDB.deleteCardFromDatabase given the parameter cardName supplied by the user.
    *  Will retrive appropriate count and display it in resultLabel to show user the current count of that cardName in the database.
    */
    
    private void removeCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCardButtonActionPerformed
        String cardName = cardNameTextField.getText();                          //Obtains a card name of a Magic card supplied by user (must be spelled/capitalized correctly).
        Card c = new Card();                                                    //Creates a Card object that will be filled in by deleteCardFromDatabase method.
        
         try {
            c = modify.deleteCardFromDatabase(cardName);                        //Calls modifyDB logic here with deleteCardFromDatabase and assigns the card returned to c.
            String u = c.getImageURL();                                         //Gets the imageURL field of the Card
            URL url = new URL(u);                                               //Converts the String URL to a URL object
            img = ImageIO.read(url);                                            //Creates an image object based off the URL
            setCardDisplayLabel(img);                                           //Calls setCardDisplayLabel to display the card's image in the label.
            
        } catch (Exception ex) {
            Logger.getLogger(AddCardPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        int count = CardDBAccess.retrieveCount(c.getMultiverseID());            //Retrieves the count of the card from the database.
        
        if (count >= 1)                                                         //If count is greater than 1, displays the count remaining.
        {
            resultLabel.setText("Deleted " + cardName + " from database!" + " Count is now: " + count);
        }
        
        else if (count == 0)                                                    //If count is 0 and deleteCardFromDatabase is called, deletes the card from the database with no count displayed.
        {
            resultLabel.setText("Deleted " + cardName + " from database!");
        }
    }//GEN-LAST:event_removeCardButtonActionPerformed

    /* addCardButtonActionPerformed
    *  addCard calls on modifyDB.addCardToDatabase given the parameter cardName supplied by the user.
    *  Will retrive appropriate count and display it in resultLabel to show user the current count of that cardName in the database.
    */
    
    private void addCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCardButtonActionPerformed
        String cardName = cardNameTextField.getText();                          //Obtains a card name of a Magic card supplied by user (must be spelled/capitalized correctly).
        Card c = new Card();                                                    //Creates a Card object that will be filled in by deleteCardFromDatabase method.
        
        try {
            c = modify.addCardToDatabase(cardName);                             //Calls modifyDB logic here with addCardToDatabase and assigns the card returned to c.
            String u = c.getImageURL();                                         //Gets the imageURL field of the Card
            URL url = new URL(u);                                               //Converts the String URL to a URL object
            img = ImageIO.read(url);                                            //Creates an image object based off the URL
            setCardDisplayLabel(img);                                           //Calls setCardDisplayLabel to display the card's image in the label.
            
        } catch (Exception ex) {
            Logger.getLogger(AddCardPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        int count = CardDBAccess.retrieveCount(c.getMultiverseID());            //Retrieves the count of the card in the database.
        
        resultLabel.setText("Added " + cardName + " to database!" + " Count is now: " + count); //Displays the updated count of the card after adding it to the database.
    }//GEN-LAST:event_addCardButtonActionPerformed

    /* clearSearchButtonActionPerformed
    *  Clears the cardName TextField, the resultLabel Text, and the cardDisplayLabel Icon.
    */
    
    private void clearSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSearchButtonActionPerformed
        cardNameTextField.setText("");
        resultLabel.setText("");
        cardDisplayLabel.setIcon(null);
    }//GEN-LAST:event_clearSearchButtonActionPerformed

    /* exitButtonActionPerformed
    *  Closes the running program.
    */
    
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void cardNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cardNameTextFieldActionPerformed

    
    // Instance variables of BufferedImage and the primary logic class ModifyDB.
    private BufferedImage img;
    private ModifyDB modify = new ModifyDB();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JButton addCardButton;
    private javax.swing.JLabel cardDisplayLabel;
    private javax.swing.JLabel cardNameLabel;
    private javax.swing.JTextField cardNameTextField;
    private javax.swing.JButton clearSearchButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton removeCardButton;
    private javax.swing.JLabel resultLabel;
    // End of variables declaration//GEN-END:variables
}
